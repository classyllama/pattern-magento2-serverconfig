---
- name: remove certbot-auto if present
  file:
    path: "{{ certbot_dir }}"
    state: absent

- name: remove old certbot auto-renew cron
  tags: crontab
  cron:
    name: certbot_renew
    job: "{{ certbot_dir }}/certbot-auto renew >> {{ certbot_logdir }}/certbot-renew.log"
    user: root
    minute: "30"
    hour: "2"
    weekday: "1"
    state: absent

- name: remove old certbot auto-renew nginx reload
  tags: crontab
  cron:
    name: certbot_renew_reload_nginx
    job: "{{ certbot_nginx_bin }} -s reload"
    user: root
    minute: "35"
    hour: "2"
    weekday: "1"
    state: absent

- name: Ensure snapd is installed.
  package:
    name: snapd
    state: present

- name: Ensure snapd is enabled.
  systemd:
    name: snapd.socket
    enabled: true
    state: started

- name: Enable classic snap support.
  file:
    src: /var/lib/snapd/snap
    dest: /snap
    state: link

- name: Install certbot via snap.
  snap:
    name: certbot
    classic: true

- name: Symlink certbot into place.
  file:
    src: /snap/bin/certbot
    dest: /usr/bin/certbot
    state: link

- name: create certbot webroot
  file: path={{ certbot_webroot_path }} state=directory

- name: create certbot log-directory
  file:
    path: "{{ certbot_logdir }}"
    owner: root
    group: root
    mode: 0700
    state: directory

- name: create /etc/nginx/default.d
  file: path=/etc/nginx/default.d state=directory

- name: configure certbot nginx webroot
  template:
    src: nginx.conf
    dest: /etc/nginx/default.d/certbot.conf
    owner: root
    group: root
  notify: reload nginx
  register: configure_result

- name: configure reload on renewal
  template:
    src: deploy_hook.sh
    dest: /etc/letsencrypt/renewal-hooks/deploy/deploy_hook.sh
    owner: root
    group: root
    mode: 0700

- name: reload nginx service
  service: name=nginx state=reloaded
  when: configure_result is changed

- name: generate certificate files
  command: >
    /usr/bin/certbot certonly
    --agree-tos
    --noninteractive
    --webroot
    --webroot-path {{ certbot_webroot_path }}
    --text
    --rsa-key-size {{ certbot_rsa_key_size }}
    --email {{ certbot_email|quote }}
    -d {{ item }}
    {{ item.startswith('www.') | ternary(item.replace("www.", "-d "),'') }}

  args:
    creates: /etc/letsencrypt/live/{{ item }}/fullchain.pem
  with_items: "{{ certbot_domains }}"
  when: certbot_domains and certbot_email and certbot_generate

- name: symlink certificate files into /etc/nginx/ssl
  file:
    src: /etc/letsencrypt/live/{{ item[0] }}/{{ item[1] }}
    dest: /etc/nginx/ssl/{{ item[0] }}.{{ item[2] }}
    state: link
    force: yes    # overwrite any self-signed certificates previously created for purpose of nginx start
  with_nested:
    - "{{ certbot_domains }}"
    - [[ fullchain.pem, crt], [ privkey.pem, key ]]
  when: certbot_domains and certbot_email and certbot_generate
  notify: reload nginx
